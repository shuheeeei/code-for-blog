# 説明をあまり妥協しないreact-hook-formの使い方[ちと応用]

## はじめに
  前回の記事(リンクにする)でreact-hook-formの使い方の基本について説明しました。
  バリデーション付きの単一のフォームが比較的簡単に作成できるかと思います。
  一方で、ユーザーや企業によって入力する項目の数が異なるフォームはどのように作成すれば良いでしょうか？
  たとえば「家族構成」、「アレルギー食品」、「役員の名前」といったような、同タイプのフォームを複数入力できるようする場合です。
  今回はこういった入力行を追加・削除ができるフォームを作成できる、useFieldArrayというカスタムフックの使い方について説明していきます。
  useFormのみの基本的なフォーム作成よりもすこ〜しだけ難しいですが、割と簡単に実装できちゃいます。

- useFieldArrayの説明
  ドキュメント（リンク）には下記のように書いてありました。
  「フィールド配列（動的な複数のinput）を操作するためのカスタムフック。」
  はじめに、で長々と書いたフォームの説明ですが、さすがはドキュメント。カッコよく説明してくれています。
  もうちょっと説明を加えると、
  入力フォーム行の追加・削除用のメソッドなどを用意してくれて、その送信データは配列で送信してくれるカスタムフック
  です。
  それでは使い方を説明していきます。
  以降では1つ以上の入力フォームを持つ行のことを「フォーム行」という名前で説明しています。
  フォームのまとまりは２行になったりブロック単位になったりと様々ですが、本記事では１行をひと纏まりとしています。

- useFieldArrayの使い方
  1. useFormとuseFieldArrayの2つをreact-hook-formからimportする
     useFormと組み合わせて使うため両方必要です。
  2. useFormから下記を取得する
     `handleSubmit, control, register`
     `const { fields, append, remove } = useFieldArray({control, name: 'フォームの名称'}`
     controlはregister以外でreact-hook-formの管理対象に含めるためのオブジェクトです。今回はuseFieldArrayと連携させるために使います。
     (handleSubmitとregisterの説明は前記事（リンク）を参照ください。)
  3. useFieldArrayから下記を取得する
     fields, append, remove
     上記それぞれについて説明します
      - fields
        各フォーム行の値をオブジェクトを要素に持つ配列です
      - append
        フォーム行を後ろに追加するメソッドです。JSの配列でいうとpushのようなものです。
        1つ注意点があり、appendをbuttonタグのonClickにを割り当てる時にはきちんと`type="button"`と書かないとonSubmitの処理が走ってしまうようです。誤爆に繋がるのでご注意を…。
      - remove
        引数に受け取ったindex番号に該当するフォーム行を削除するメソッドです。indexは配列と同様に0スタートです。つまり1行目のindexは0です。
  4. hadleSubmitはformタグ、registerはその中の各フォーム系タグのrefに渡す
     useFormだけのフォーム作成とほぼ同じです。
     が、ドキュメントによると、
     「バリデーションを設定しない場合でもrefに渡すのはregisterのままではなくregister()とする必要がある」
     とのことです。（registerのままでも動いたのですが。。。）
  5. 各フォーム系タグのname属性を命名規則に則り設定する。
     ここは少しわかりづらく見た目が奇妙ですが、頑張って説明します。
     useFormのみの場合ではname属性に渡した文字列が送信データオブジェクトのプロパティになっていました。
     実はreact-hook-formではこちら（https://react-hook-form.com/jp/api/#register）にある通り、
     name属性の命名によって送信データオブジェクトの構造を決めることができるようになっているのです。
     useFieldArrayを使用する場合には、下記のような構造にする必要があります。
       `{ フォーム名: [{1行目}, {2行目}, ...] }`
     したがってテンプレートリテラルを使って下記のような文字列に設定します。
       `test[${index}].hoge`
     `test`は実装しているフォームを表す名前、indexは行数、hogeはフォーム系タグの入力値の名前です。
     （indexは後述するmapメソッドのindexを当てはめます。)
      たとえば、家族（family）情報の入力フォームで２行目の名前(name)の場合は次のようになります。
      'family[1].name'
      この場合の送信データオブジェクトは `{ family: [{name: 1行目の入力値}, {name: 2行目の入力値}], ... }`

     ちょっと奇妙な見た目ですが、ちゃんと設定すればAPIでpostする時のデータ型にここで合わせることができます。
  6. appendとremoveをform内に設置する
     appendはフォーム全体に関するものなので1画面に1箇所設置すればいいです。remove各フォーム行に関数ものなので各行に1つ設置します。
  7. 作ったフォームをmapメソッドで展開する。

  コードを書く

- 動作の確認
  - append
    スクショ
  - remove
    スクショ
  - 送信データ
    スクショ

- useFieldArrayでのフォーム初期値の設定方法
  1. APIなどで初期データを受けとって初期値を入れる場合
    - useFieldArrayでdefaultValuesの設定
    - 各フォーム系要素にdefaultValueを設定してfield
    - APIでデータを取得する場合にはuseState, useEffect, resetを使う

    コードを書く

  2. 行を追加した際に初期値を入れたい場合
    - useFieldArrayでdefaultValuesの設定
    - 各フォーム系要素にdefaultValueを設定してfield
    　を同様に行う
    - appendの引数を下記のようにする。

    コードを書く
